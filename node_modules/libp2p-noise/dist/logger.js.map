{"version":3,"sources":["../src/logger.ts"],"names":["logger","keyLogger","DUMP_SESSION_KEYS","logLocalStaticKeys","s","publicKey","toString","privateKey","logLocalEphemeralKeys","e","logRemoteStaticKey","rs","logRemoteEphemeralKey","re","logCipherState","session","cs1","cs2","n","k"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;;;AAIO,MAAMA,MAAM,GAAG,oBAAM,cAAN,CAAf;;AAEP,IAAIC,SAAJ;;AACA,IAAGC,4BAAH,EAAqB;AACnBD,EAAAA,SAAS,GAAGD,MAAZ;AACD,CAFD,MAGK;AACHC,EAAAA,SAAS,GAAG,MAAM;AAAE;AAAkB,GAAtC;AACD;;AAEM,SAASE,kBAAT,CAA4BC,CAA5B,EAA8C;AACnDH,EAAAA,SAAS,CAAE,2BAA0BG,CAAC,CAACC,SAAF,CAAYC,QAAZ,CAAqB,KAArB,CAA4B,EAAxD,CAAT;AACAL,EAAAA,SAAS,CAAE,4BAA2BG,CAAC,CAACG,UAAF,CAAaD,QAAb,CAAsB,KAAtB,CAA6B,EAA1D,CAAT;AACD;;AAEM,SAASE,qBAAT,CAA+BC,CAA/B,EAA2D;AAChE,MAAGA,CAAH,EAAK;AACHR,IAAAA,SAAS,CAAE,8BAA6BQ,CAAC,CAACJ,SAAF,CAAYC,QAAZ,CAAqB,KAArB,CAA4B,EAA3D,CAAT;AACAL,IAAAA,SAAS,CAAE,+BAA8BQ,CAAC,CAACF,UAAF,CAAaD,QAAb,CAAsB,KAAtB,CAA6B,EAA7D,CAAT;AACD,GAHD,MAII;AACFL,IAAAA,SAAS,CAAC,+BAAD,CAAT;AACD;AACF;;AAEM,SAASS,kBAAT,CAA4BC,EAA5B,EAA8C;AACnDV,EAAAA,SAAS,CAAE,4BAA2BU,EAAE,CAACL,QAAH,CAAY,KAAZ,CAAmB,EAAhD,CAAT;AACD;;AAEM,SAASM,qBAAT,CAA+BC,EAA/B,EAAiD;AACtDZ,EAAAA,SAAS,CAAE,+BAA8BY,EAAE,CAACP,QAAH,CAAY,KAAZ,CAAmB,EAAnD,CAAT;AACD;;AAEM,SAASQ,cAAT,CAAwBC,OAAxB,EAAqD;AAC1D,MAAGA,OAAO,CAACC,GAAR,IAAeD,OAAO,CAACE,GAA1B,EAA8B;AAC5BhB,IAAAA,SAAS,CAAE,kBAAiBc,OAAO,CAACC,GAAR,CAAYE,CAAE,IAAGH,OAAO,CAACC,GAAR,CAAYG,CAAZ,CAAcb,QAAd,CAAuB,KAAvB,CAA8B,EAAlE,CAAT;AACAL,IAAAA,SAAS,CAAE,kBAAiBc,OAAO,CAACE,GAAR,CAAYC,CAAE,IAAGH,OAAO,CAACE,GAAR,CAAYE,CAAZ,CAAcb,QAAd,CAAuB,KAAvB,CAA8B,EAAlE,CAAT;AACD,GAHD,MAII;AACFL,IAAAA,SAAS,CAAC,uBAAD,CAAT;AACD;AACF","sourcesContent":["import debug from \"debug\";\nimport {DUMP_SESSION_KEYS} from './constants';\nimport { KeyPair } from \"./@types/libp2p\";\nimport { NoiseSession, SymmetricState } from \"./@types/handshake\";\n\nexport const logger = debug('libp2p:noise');\n\nlet keyLogger;\nif(DUMP_SESSION_KEYS){\n  keyLogger = logger\n}\nelse {\n  keyLogger = () => { /* do nothing */ }\n}\n\nexport function logLocalStaticKeys(s: KeyPair): void {\n  keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${s.publicKey.toString('hex')}`)\n  keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${s.privateKey.toString('hex')}`)\n}\n\nexport function logLocalEphemeralKeys(e: KeyPair|undefined): void {\n  if(e){\n    keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${e.publicKey.toString('hex')}`)\n    keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${e.privateKey.toString('hex')}`)\n  }\n  else{\n    keyLogger('Missing local ephemeral keys.')\n  }\n}\n\nexport function logRemoteStaticKey(rs: Buffer): void {\n  keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${rs.toString('hex')}`)\n}\n\nexport function logRemoteEphemeralKey(re: Buffer): void {\n  keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${re.toString('hex')}`)\n}\n\nexport function logCipherState(session: NoiseSession): void {\n  if(session.cs1 && session.cs2){\n    keyLogger(`CIPHER_STATE_1 ${session.cs1.n} ${session.cs1.k.toString('hex')}`)\n    keyLogger(`CIPHER_STATE_2 ${session.cs2.n} ${session.cs2.k.toString('hex')}`)\n  }\n  else{\n    keyLogger('Missing cipher state.')\n  }\n}\n"],"file":"logger.js"}