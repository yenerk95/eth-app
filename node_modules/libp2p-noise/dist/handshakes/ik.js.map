{"version":3,"sources":["../../src/handshakes/ik.ts"],"names":["IK","AbstractHandshake","initSession","initiator","prologue","s","rs","psk","createEmptyKey","hs","initializeInitiator","initializeResponder","i","mc","sendMessage","session","message","messageBuffer","writeMessageA","mb","h","cs1","cs2","writeMessageB","Error","writeMessageRegular","recvMessage","plaintext","Buffer","alloc","valid","readMessageA","pt","v","readMessageB","payload","e","ne","publicKey","mixHash","ss","mixKey","dh","privateKey","spk","from","ns","encryptAndHash","ciphertext","re","split","valid1","decryptAndHash","length","valid2","name","initializeSymmetric"],"mappings":"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","sourcesContent":["import {Buffer} from \"buffer\";\nimport {CipherState, HandshakeState, MessageBuffer, NoiseSession} from \"../@types/handshake\";\nimport {bytes, bytes32} from \"../@types/basic\";\nimport {generateKeypair, isValidPublicKey} from \"../utils\";\nimport {AbstractHandshake} from \"./abstract-handshake\";\nimport {KeyPair} from \"../@types/libp2p\";\n\n\nexport class IK extends AbstractHandshake {\n  public initSession(initiator: boolean, prologue: bytes32, s: KeyPair, rs: bytes32): NoiseSession {\n    const psk = this.createEmptyKey();\n\n    let hs;\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk);\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk);\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0,\n    };\n  }\n\n  public sendMessage(session: NoiseSession, message: bytes): MessageBuffer {\n    let messageBuffer: MessageBuffer;\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message);\n    } else if (session.mc === 1) {\n      const { messageBuffer: mb, h, cs1, cs2 } = this.writeMessageB(session.hs, message);\n      messageBuffer = mb;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    } else if (session.mc > 1) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error(\"CS1 (cipher state) is not defined\")\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message);\n      } else {\n        if (!session.cs2) {\n          throw new Error(\"CS2 (cipher state) is not defined\")\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message);\n      }\n    } else {\n      throw new Error(\"Session invalid.\")\n    }\n\n    session.mc++;\n    return messageBuffer;\n  }\n\n  public recvMessage(session: NoiseSession, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    let plaintext = Buffer.alloc(0), valid = false;\n    if (session.mc === 0) {\n      ({plaintext, valid} = this.readMessageA(session.hs, message));\n    }\n    if (session.mc === 1) {\n      const { plaintext: pt, valid: v, h, cs1, cs2 } = this.readMessageB(session.hs, message);\n      plaintext = pt;\n      valid = v;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    }\n    session.mc++;\n    return {plaintext, valid};\n  }\n\n  private writeMessageA(hs: HandshakeState, payload: bytes): MessageBuffer {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const spk = Buffer.from(hs.s.publicKey);\n    const ns = this.encryptAndHash(hs.ss, spk);\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n\n    return { ne, ns, ciphertext };\n  }\n\n  private writeMessageB(hs: HandshakeState, payload: bytes) {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    const ns = this.createEmptyKey();\n    const messageBuffer: MessageBuffer = {ne, ns, ciphertext};\n    const { cs1, cs2 } = this.split(hs.ss);\n\n    return { messageBuffer, cs1, cs2, h: hs.ss.h }\n  }\n\n  private readMessageA(hs: HandshakeState, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {plaintext: ns, valid: valid1} = this.decryptAndHash(hs.ss, message.ns);\n    if (valid1 && ns.length === 32 && isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const {plaintext, valid: valid2} = this.decryptAndHash(hs.ss, message.ciphertext);\n    return {plaintext, valid: (valid1 && valid2)};\n  }\n\n  private readMessageB(hs: HandshakeState, message: MessageBuffer): {h: bytes; plaintext: bytes; valid: boolean; cs1: CipherState; cs2: CipherState} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    if (!hs.e) {\n      throw new Error(\"Handshake state should contain ephemeral key by now.\");\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {plaintext, valid} = this.decryptAndHash(hs.ss, message.ciphertext);\n    const { cs1, cs2 } = this.split(hs.ss);\n\n    return { h: hs.ss.h, valid, plaintext, cs1, cs2 };\n  }\n\n  private initializeInitiator(prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, rs);\n    const re = Buffer.alloc(32);\n\n    return { ss, s, rs, re, psk };\n  }\n\n  private initializeResponder(prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, s.publicKey);\n    const re = Buffer.alloc(32);\n\n    return { ss, s, rs, re, psk };\n  }\n}\n"],"file":"ik.js"}