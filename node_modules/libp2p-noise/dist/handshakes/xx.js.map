{"version":3,"sources":["../../src/handshakes/xx.ts"],"names":["XX","AbstractHandshake","initializeInitiator","prologue","s","rs","psk","name","ss","initializeSymmetric","mixHash","re","Buffer","alloc","initializeResponder","writeMessageA","hs","payload","e","ns","ne","publicKey","ciphertext","encryptAndHash","writeMessageB","mixKey","dh","privateKey","spk","from","writeMessageC","createEmptyKey","messageBuffer","cs1","cs2","split","h","readMessageA","message","decryptAndHash","readMessageB","Error","plaintext","valid","valid1","length","valid2","readMessageC","initSession","initiator","i","mc","sendMessage","session","ephemeral","resultingBuffer","writeMessageRegular","recvMessage","resultingPlaintext","resultingValid"],"mappings":"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","sourcesContent":["import { Buffer } from 'buffer';\nimport { bytes32, bytes } from '../@types/basic'\nimport { KeyPair } from '../@types/libp2p'\nimport {generateKeypair, isValidPublicKey} from '../utils';\nimport {CipherState, HandshakeState, MessageBuffer, NoiseSession} from \"../@types/handshake\";\nimport {AbstractHandshake} from \"./abstract-handshake\";\n\n\nexport class XX extends AbstractHandshake {\n  private initializeInitiator(prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = \"Noise_XX_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    const re = Buffer.alloc(32);\n\n    return { ss, s, rs, psk, re };\n  }\n\n  private initializeResponder(prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = \"Noise_XX_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    const re = Buffer.alloc(32);\n\n    return { ss, s, rs, psk, re };\n  }\n\n  private writeMessageA(hs: HandshakeState, payload: bytes, e?: KeyPair): MessageBuffer {\n    const ns = Buffer.alloc(0);\n\n    if (e) {\n      hs.e = e;\n    } else {\n      hs.e = generateKeypair();\n    }\n\n    const ne = hs.e.publicKey;\n\n    this.mixHash(hs.ss, ne);\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n\n    return {ne, ns, ciphertext};\n  }\n\n  private writeMessageB(hs: HandshakeState, payload: bytes): MessageBuffer {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    const spk = Buffer.from(hs.s.publicKey);\n    const ns = this.encryptAndHash(hs.ss, spk);\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n\n    return { ne, ns, ciphertext };\n  }\n\n  private writeMessageC(hs: HandshakeState, payload: bytes) {\n    const spk = Buffer.from(hs.s.publicKey);\n    const ns = this.encryptAndHash(hs.ss, spk);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    const ne = this.createEmptyKey();\n    const messageBuffer: MessageBuffer = {ne, ns, ciphertext};\n    const { cs1, cs2 } = this.split(hs.ss);\n\n    return { h: hs.ss.h, messageBuffer, cs1, cs2 };\n  }\n\n  private readMessageA(hs: HandshakeState, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    return this.decryptAndHash(hs.ss, message.ciphertext);\n  }\n\n  private readMessageB(hs: HandshakeState, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    if (!hs.e) {\n      throw new Error(\"Handshake state `e` param is missing.\");\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    const {plaintext: ns, valid: valid1} = this.decryptAndHash(hs.ss, message.ns);\n    if (valid1 && ns.length === 32 && isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const {plaintext, valid: valid2} = this.decryptAndHash(hs.ss, message.ciphertext);\n    return {plaintext, valid: (valid1 && valid2)};\n  }\n\n  private readMessageC(hs: HandshakeState, message: MessageBuffer): {h: bytes; plaintext: bytes; valid: boolean; cs1: CipherState; cs2: CipherState} {\n    const {plaintext: ns, valid: valid1} = this.decryptAndHash(hs.ss, message.ns);\n    if (valid1 && ns.length === 32 && isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n    if (!hs.e) {\n      throw new Error(\"Handshake state `e` param is missing.\");\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n\n    const {plaintext, valid: valid2} = this.decryptAndHash(hs.ss, message.ciphertext);\n    const { cs1, cs2 } = this.split(hs.ss);\n\n    return { h: hs.ss.h, plaintext, valid: (valid1 && valid2), cs1, cs2 };\n  }\n\n  public initSession(initiator: boolean, prologue: bytes32, s: KeyPair): NoiseSession {\n    const psk = this.createEmptyKey();\n    const rs = Buffer.alloc(32); // no static key yet\n    let hs;\n\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk);\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk);\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0,\n    };\n  }\n\n  public sendMessage(session: NoiseSession, message: bytes, ephemeral?: KeyPair): MessageBuffer {\n    let messageBuffer: MessageBuffer;\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message, ephemeral);\n    } else if (session.mc === 1) {\n      messageBuffer = this.writeMessageB(session.hs, message);\n    } else if (session.mc === 2) {\n      const { h, messageBuffer: resultingBuffer, cs1, cs2 } = this.writeMessageC(session.hs, message);\n      messageBuffer = resultingBuffer;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    } else if (session.mc > 2) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error(\"CS1 (cipher state) is not defined\")\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message);\n      } else {\n        if (!session.cs2) {\n          throw new Error(\"CS2 (cipher state) is not defined\")\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message);\n      }\n    } else {\n      throw new Error(\"Session invalid.\")\n    }\n\n    session.mc++;\n    return messageBuffer;\n  }\n\n  public recvMessage(session: NoiseSession, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    let plaintext: bytes = Buffer.alloc(0);\n    let valid = false;\n    if (session.mc === 0) {\n      ({plaintext, valid} = this.readMessageA(session.hs, message));\n    } else if (session.mc === 1) {\n      ({plaintext, valid} = this.readMessageB(session.hs, message));\n    } else if (session.mc === 2) {\n      const { h, plaintext: resultingPlaintext, valid: resultingValid, cs1, cs2 } = this.readMessageC(session.hs, message);\n      plaintext = resultingPlaintext;\n      valid = resultingValid;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    }\n    session.mc++;\n    return {plaintext, valid};\n  }\n}\n"],"file":"xx.js"}