{"version":3,"sources":["../../src/handshakes/abstract-handshake.ts"],"names":["MIN_NONCE","AbstractHandshake","encryptWithAd","cs","ad","plaintext","e","encrypt","k","n","setNonce","incrementNonce","decryptWithAd","ciphertext","valid","decrypt","hasKey","isEmptyKey","nonce","createEmptyKey","Buffer","alloc","emptyKey","equals","nonceToBytes","writeUInt32LE","ctx","AEAD","from","init","aad","concat","final","encryptAndHash","ss","h","mixHash","tag","slice","length","verify","decryptAndHash","dh","privateKey","publicKey","derived","x25519","derive","result","copy","message","data","getHash","a","b","SHA256","digest","mixKey","ikm","ck","tempK","initializeKey","initializeSymmetric","protocolName","protocolNameBytes","hashProtocolName","key","split","tempk1","tempk2","cs1","cs2","writeMessageRegular","payload","ne","ns","readMessageRegular"],"mappings":"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","sourcesContent":["import {Buffer} from \"buffer\";\nimport AEAD from 'bcrypto/lib/js/aead';\nimport x25519 from 'bcrypto/lib/js/x25519';\nimport SHA256 from 'bcrypto/lib/js/sha256';\n\nimport {bytes, bytes32, uint32} from \"../@types/basic\";\nimport {CipherState, MessageBuffer, SymmetricState} from \"../@types/handshake\";\nimport {getHkdf} from \"../utils\";\nimport {logger} from \"../logger\";\n\nexport const MIN_NONCE = 0;\n\nexport abstract class AbstractHandshake {\n  public encryptWithAd(cs: CipherState, ad: bytes, plaintext: bytes): bytes {\n    const e = this.encrypt(cs.k, cs.n, ad, plaintext);\n    this.setNonce(cs, this.incrementNonce(cs.n));\n\n    return e;\n  }\n\n  public decryptWithAd(cs: CipherState, ad: bytes, ciphertext: bytes): {plaintext: bytes; valid: boolean} {\n    const {plaintext, valid} = this.decrypt(cs.k, cs.n, ad, ciphertext);\n    this.setNonce(cs, this.incrementNonce(cs.n));\n\n    return {plaintext, valid};\n  }\n\n\n  // Cipher state related\n  protected hasKey(cs: CipherState): boolean {\n    return !this.isEmptyKey(cs.k);\n  }\n\n  protected setNonce(cs: CipherState, nonce: uint32): void {\n    cs.n = nonce;\n  }\n\n  protected createEmptyKey(): bytes32 {\n    return Buffer.alloc(32);\n  }\n\n  protected isEmptyKey(k: bytes32): boolean {\n    const emptyKey = this.createEmptyKey();\n    return emptyKey.equals(k);\n  }\n\n  protected incrementNonce(n: uint32): uint32 {\n    return n + 1;\n  }\n\n  protected nonceToBytes(n: uint32): bytes {\n    const nonce = Buffer.alloc(12);\n    nonce.writeUInt32LE(n, 4);\n\n    return nonce;\n  }\n\n  protected encrypt(k: bytes32, n: uint32, ad: bytes, plaintext: bytes): bytes {\n    const nonce = this.nonceToBytes(n);\n    const ctx = new AEAD();\n    plaintext = Buffer.from(plaintext);\n    ctx.init(k, nonce);\n    ctx.aad(ad);\n    ctx.encrypt(plaintext);\n\n    // Encryption is done on the sent reference\n    return Buffer.concat([plaintext, ctx.final()]);\n  }\n\n  protected encryptAndHash(ss: SymmetricState, plaintext: bytes): bytes {\n    let ciphertext;\n    if (this.hasKey(ss.cs)) {\n      ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n    } else {\n      ciphertext = plaintext;\n    }\n\n    this.mixHash(ss, ciphertext);\n    return ciphertext;\n  }\n\n  protected decrypt(k: bytes32, n: uint32, ad: bytes, ciphertext: bytes): {plaintext: bytes; valid: boolean} {\n    const nonce = this.nonceToBytes(n);\n    const ctx = new AEAD();\n    ciphertext = Buffer.from(ciphertext);\n    const tag = ciphertext.slice(ciphertext.length - 16);\n    ciphertext = ciphertext.slice(0, ciphertext.length - 16);\n    ctx.init(k, nonce);\n    ctx.aad(ad);\n    ctx.decrypt(ciphertext);\n    // Decryption is done on the sent reference\n    return {plaintext: ciphertext, valid: ctx.verify(tag)};\n  }\n\n  protected decryptAndHash(ss: SymmetricState, ciphertext: bytes): {plaintext: bytes; valid: boolean} {\n    let plaintext: bytes, valid = true;\n    if (this.hasKey(ss.cs)) {\n      ({plaintext, valid} = this.decryptWithAd(ss.cs, ss.h, ciphertext));\n    } else {\n      plaintext = ciphertext;\n    }\n\n    this.mixHash(ss, ciphertext);\n    return {plaintext, valid};\n  }\n\n  protected dh(privateKey: bytes32, publicKey: bytes32): bytes32 {\n    try {\n      const derived = x25519.derive(publicKey, privateKey);\n      const result = Buffer.alloc(32);\n      derived.copy(result);\n      return result;\n    } catch (e) {\n      logger(e.message);\n      return Buffer.alloc(32);\n    }\n  }\n\n  protected mixHash(ss: SymmetricState, data: bytes): void {\n    ss.h = this.getHash(ss.h, data);\n  }\n\n  protected getHash(a: bytes, b: bytes): bytes32 {\n    return SHA256.digest(Buffer.from([...a, ...b]));\n  }\n\n  protected mixKey(ss: SymmetricState, ikm: bytes32): void {\n    const [ ck, tempK ] = getHkdf(ss.ck, ikm);\n    ss.cs = this.initializeKey(tempK) as CipherState;\n    ss.ck = ck;\n  }\n\n  protected initializeKey(k: bytes32): CipherState {\n    const n = MIN_NONCE;\n    return { k, n };\n  }\n\n  // Symmetric state related\n\n  protected initializeSymmetric(protocolName: string): SymmetricState {\n    const protocolNameBytes: bytes = Buffer.from(protocolName, 'utf-8');\n    const h = this.hashProtocolName(protocolNameBytes);\n\n    const ck = h;\n    const key = this.createEmptyKey();\n    const cs: CipherState = this.initializeKey(key);\n\n    return { cs, ck, h };\n  }\n\n  protected hashProtocolName(protocolName: bytes): bytes32 {\n    if (protocolName.length <= 32) {\n      const h = Buffer.alloc(32);\n      protocolName.copy(h);\n      return h;\n    } else {\n      return this.getHash(protocolName, Buffer.alloc(0));\n    }\n  }\n\n  protected split(ss: SymmetricState) {\n    const [ tempk1, tempk2 ] = getHkdf(ss.ck, Buffer.alloc(0));\n    const cs1 = this.initializeKey(tempk1);\n    const cs2 = this.initializeKey(tempk2);\n\n    return { cs1, cs2 };\n  }\n\n  protected writeMessageRegular(cs: CipherState, payload: bytes): MessageBuffer {\n    const ciphertext = this.encryptWithAd(cs, Buffer.alloc(0), payload);\n    const ne = this.createEmptyKey();\n    const ns = Buffer.alloc(0);\n\n    return { ne, ns, ciphertext };\n  }\n\n  protected readMessageRegular(cs: CipherState, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    return this.decryptWithAd(cs, Buffer.alloc(0), message.ciphertext);\n  }\n}\n"],"file":"abstract-handshake.js"}